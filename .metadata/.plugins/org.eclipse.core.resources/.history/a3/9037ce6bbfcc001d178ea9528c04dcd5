package com.bms.payment.controller;

import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;

import com.bms.payment.dto.PaymentEvent;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.JsonSyntaxException;
import com.stripe.exception.SignatureVerificationException;
import com.stripe.model.Event;
import com.stripe.model.EventDataObjectDeserializer;
import com.stripe.model.StripeObject;
import com.stripe.net.Webhook;

@RestController
public class StripeController {
	
	String endpointSecret = "whsec_3a865be3821f880f4cbb0a4f46452a33b7cebcd28494fc3f643531162c9d8b56";
	
	private final KafkaTemplate<Long, Object> kafkaTemplate;
	
	
	
	public StripeController(KafkaTemplate<Long, Object> kafkaTemplate) {
		super();
		this.kafkaTemplate = kafkaTemplate;
	}



	@PostMapping("/webhook")
	public String handleStripeEvents(@RequestBody String payload, @RequestHeader("Stripe-Signature") String sigHeader) {
		Event event = null;

        try {
            event = Webhook.constructEvent(
                payload, sigHeader, endpointSecret
            );
        } catch (JsonSyntaxException e) {
            // Invalid payload
            
            return "";
        } catch (SignatureVerificationException e) {
            // Invalid signature
            return "";
        }
        EventDataObjectDeserializer dataObjectDeserializer = event.getDataObjectDeserializer();
        StripeObject stripeObject = null;
        if (dataObjectDeserializer.getObject().isPresent()) {
            stripeObject = dataObjectDeserializer.getObject().get();
        } else {
            // Deserialization failed, probably due to an API version mismatch.
            // Refer to the Javadoc documentation on `EventDataObjectDeserializer` for
            // instructions on how to handle this case, or return an error here.
        }
        // Handle the event
        switch (event.getType()) {
          case "charge.succeeded": {
            // Then define and call a function to handle the event invoice.payment_succeeded
        	  JsonObject obj = JsonParser.parseString(event.toJson()).getAsJsonObject();
        	  JsonObject dataObj = obj.getAsJsonObject("data");
        	  JsonObject objectObj = dataObj.getAsJsonObject("object");
        	  JsonObject paymentObj = dataObj.getAsJsonObject("payment_intent");
        	  System.out.println(obj.getAsJsonObject("data.object.payment_intent").getAsString());
//        	  kafkaTemplate.send("payment_booking", new PaymentEvent(payment.getBookingId(), "SUCCESS", payment.getSeatIds()));
            break;
          }
          case "charge.failed" : {
//        	  kafkaTemplate.send("payment_booking", new PaymentEvent(payment.getBookingId(), "FAILURE", payment.getSeatIds()));
        	  break;
          }
          // ... handle other event types
          default:
            System.out.println("Unhandled event type: " + event.getType());
        }

        return "200";

	}

}
