package com.bms.payment.controller;

import org.springframework.http.MediaType;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bms.payment.dto.Payment;
import com.bms.payment.dto.PaymentEvent;
import com.google.gson.Gson;
import com.stripe.exception.StripeException;
import com.stripe.model.PaymentIntent;
import com.stripe.param.PaymentIntentCreateParams;

@RestController
@RequestMapping("payment")
public class PaymentController {
	
	private final KafkaTemplate<Long, Object> kafkaTemplate;
	private static Gson gson = new Gson();
	
	public PaymentController(KafkaTemplate<Long, Object> kafkaTemplate) {
		super();
		this.kafkaTemplate = kafkaTemplate;
	}


	@PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
	@CrossOrigin(origins = "*")
	public void handlePayment(@RequestBody Payment payment) {
		try {
			Thread.sleep(5000);
		}catch(Exception e) {
			
		}
		if(payment.getBookingId()!=2) {
		kafkaTemplate.send("payment_booking", new PaymentEvent(payment.getBookingId(), "SUCCESS", payment.getSeatIds()));
		}else {
			kafkaTemplate.send("payment_booking", new PaymentEvent(payment.getBookingId(), "FAILURE", payment.getSeatIds()));
		}
	}
	
	 static class CreatePaymentResponse {
		    private String clientSecret;
		    public CreatePaymentResponse(String clientSecret) {
		      this.clientSecret = clientSecret;
		    }
		  }

	
	
	
	@PostMapping("/create-payment-intent")
	public CreatePaymentResponse createPaymentIntent(@RequestBody PaymentRequest payment) throws StripeException {
		PaymentIntentCreateParams params =
		        PaymentIntentCreateParams.builder()
		          .setAmount((long)payment.getPrice())
		          .setCurrency("inr")
		          .build();
		      // Create a PaymentIntent with the order amount and currency
		      PaymentIntent paymentIntent = PaymentIntent.create(params);

		      CreatePaymentResponse paymentResponse = new CreatePaymentResponse(paymentIntent.getClientSecret());
		      return paymentResponse;
	}
}
